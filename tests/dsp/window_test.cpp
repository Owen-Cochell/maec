/**
 * @file window_test.cpp
 * @author Owen Cochell (owencochell@gmail.com)
 * @brief Tests for window functions
 * @version 0.1
 * @date 2023-07-29
 * 
 * @copyright Copyright (c) 2023
 * 
 */

#include "dsp/window.hpp"

#include <gtest/gtest.h>

#include <vector>

// Known test data

const int window_test_size = 50;

const std::vector<long double> blackman_data = {-1.3877787807814457e-17, 0.0014885821314993136, 0.006058064810356409, 0.014009569334807327, 0.0258120534031473, 0.04205539599650429, 0.06338945115686863, 0.09045342435412808, 0.12380065262547063, 0.16382425721789773, 0.2106891582931365, 0.26427559272245693, 0.32413857979414545, 0.38948678039455553, 0.45918295754596367, 0.5317668505411229, 0.605499812310644, 0.6784291257073801, 0.7484686030580437, 0.8134909707872374, 0.8714267198957116, 0.9203636180999082, 0.9586409632547709, 0.9849329190832143, 0.9983158974810278, 0.9983158974810278, 0.9849329190832145, 0.958640963254771, 0.9203636180999082, 0.871426719895712, 0.8134909707872376, 0.748468603058044, 0.6784291257073805, 0.605499812310644, 0.5317668505411233, 0.45918295754596367, 0.3894867803945559, 0.32413857979414556, 0.26427559272245715, 0.21068915829313667, 0.163824257217898, 0.1238006526254708, 0.09045342435412808, 0.06338945115686873, 0.04205539599650429, 0.0258120534031474, 0.014009569334807334, 0.0060580648103564505, 0.0014885821314992859, -1.3877787807814457e-17};
const std::vector<long double> hann_data = {0.0, 0.004104993088376974, 0.016352568480485274, 0.03654162132698913, 0.0643406479383053, 0.09929318906602175, 0.14082532495113625, 0.18825509907063326, 0.24080371584473748, 0.2976083284388031, 0.3577362066844837, 0.4202000524833104, 0.4839742112141724, 0.5480115129538409, 0.6112604669781572, 0.6726825272106538, 0.7312691451204176, 0.7860583300610848, 0.8361504451306583, 0.8807229791845671, 0.9190440524459202, 0.9504844339512095, 0.9745278735053343, 0.9907795784955327, 0.9989726963751682, 0.9989726963751682, 0.9907795784955327, 0.9745278735053344, 0.9504844339512095, 0.9190440524459204, 0.8807229791845672, 0.8361504451306585, 0.7860583300610849, 0.7312691451204176, 0.672682527210654, 0.6112604669781572, 0.5480115129538412, 0.4839742112141725, 0.4202000524833107, 0.3577362066844839, 0.29760832843880347, 0.2408037158447377, 0.18825509907063326, 0.14082532495113642, 0.09929318906602175, 0.06434064793830552, 0.03654162132698918, 0.016352568480485385, 0.004104993088376974, 0.0};
const std::vector<long double> hamming_data = {0.08000000000000007, 0.0837765936413069, 0.0950443630020465, 0.11361829162083009, 0.13919339610324094, 0.17134973394074005, 0.20955929895504544, 0.25319469114498266, 0.3015394185771585, 0.35379966216369885, 0.4091173101497251, 0.4665840482846456, 0.5252562743170386, 0.5841705919175336, 0.6423596296199047, 0.6988679250338015, 0.7527676135107843, 0.803173663656198, 0.8492584095202057, 0.8902651408498017, 0.9255205282502466, 0.9544456792351128, 0.9765656436249075, 0.9915172122158901, 0.9990548806651547, 0.9990548806651547, 0.9915172122158902, 0.9765656436249076, 0.9544456792351128, 0.9255205282502468, 0.8902651408498019, 0.8492584095202058, 0.8031736636561981, 0.7527676135107843, 0.6988679250338017, 0.6423596296199047, 0.584170591917534, 0.5252562743170387, 0.4665840482846459, 0.4091173101497253, 0.35379966216369924, 0.3015394185771587, 0.25319469114498266, 0.20955929895504555, 0.17134973394074005, 0.13919339610324116, 0.11361829162083009, 0.0950443630020466, 0.0837765936413069, 0.08000000000000007};

/**
 * @brief Ensures the blackman window function works correctly
 * 
 */
TEST(WindowTest, Blackman) {

    // Iterate over test data:

    for (int i = 0; i < window_test_size; ++i) {

        // Ensure values are accurate:

        ASSERT_NEAR(window_blackman(i, window_test_size), blackman_data.at(i), 0.0001);
    }
}

/**
 * @brief Ensures the Hann window function works correctly
 * 
 */
TEST(WindowTest, Hann) {

    // Iterate over test data:

    for (int i = 0; i < window_test_size; ++i) {

        // Ensure values are accurate:

        ASSERT_NEAR(window_hann(i, window_test_size), hann_data.at(i), 0.0001);
    }
}

/**
 * @brief Ensures the Hamming window function works correctly
 * 
 */
TEST(WindowTest, Hamming) {

    // Iterate over test data:

    for (int i = 0; i < window_test_size; ++i) {

        // Ensure values are accurate:

        ASSERT_NEAR(window_hamming(i, window_test_size), hamming_data.at(i), 0.0001);
    }
}
